{"module:require-extra":{"longname":"module:require-extra","name":"require-extra","kind":"module","description":"NodeJs module loading with an asynchronous flavour","type":{"names":["function"]},"version":"0.2.0","order":13},"resolveModulePath":{"longname":"resolveModulePath","name":"resolveModulePath","scope":"global","kind":"function","description":"Resolve a module path starting from current directory via returned promise.","params":[{"type":{"names":["Object"]},"optional":true,"defaultvalue":"resolver","description":"User-created resolver function.","name":"userResolver"},{"type":{"names":["string"]},"description":"Module name or path (same format as supplied to require()).","name":"moduleName"}],"returns":[{"type":{"names":["bluebird"]}}],"access":"public","order":1},"getCallingDir":{"longname":"getCallingDir","name":"getCallingDir","scope":"global","kind":"function","description":"Calculate the calling directory path by examing the stack-trace.","params":[],"returns":[{"type":{"names":["string"]},"description":"Directory path"}],"access":"private","order":2},"getRoot":{"longname":"getRoot","name":"getRoot","scope":"global","kind":"function","description":"Get the root directory to use from the supplied object or calculate it.","params":[{"type":{"names":["Object"]},"description":"The options object containing a 'dir' property.","name":"obj"}],"returns":[{"type":{"names":["string"]},"description":"The directory path."}],"access":"private","order":3},"getResolve":{"longname":"getResolve","name":"getResolve","scope":"global","kind":"function","description":"Get the resolver object from a given object. Assumes it has received either an actual resolver or an options object with resolver in it. If this is not true then return the default resolver.","params":[{"type":{"names":["Object"]},"description":"Object to get resolver from.","name":"obj"}],"returns":[{"type":{"names":["Object"]},"description":"The resolver object."}],"access":"private","order":4},"makeArray":{"longname":"makeArray","name":"makeArray","scope":"global","kind":"function","description":"Return given value as array. If already an array, just return as-is. Undefined will return an empty array.","params":[{"type":{"names":["Array","*"]},"description":"Value to return as an array","name":"ary"}],"returns":[{"type":{"names":["Array"]}}],"access":"private","order":5},"getModule":{"longname":"getModule","name":"getModule","scope":"global","kind":"function","description":"Load a module or return a default value. Can take an array to try. Will load module asychronously.","params":[{"type":{"names":["string","Array"]},"description":"Module path or array of paths.","name":"modulePath"},{"type":{"names":["*"]},"optional":true,"defaultvalue":false,"description":"The default value to return if module load fails.","name":"defaultReturnValue"}],"returns":[{"type":{"names":["bluebird"]}}],"access":"public","order":6},"loadModuleText":{"longname":"loadModuleText","name":"loadModuleText","scope":"global","kind":"function","description":"Read text from a file and handle any errors.","params":[{"type":{"names":["string"]},"name":"fileName"}],"returns":[{"type":{"names":["bluebird"]}}],"access":"private","order":7},"evalModuleText":{"longname":"evalModuleText","name":"evalModuleText","scope":"global","kind":"function","description":"Evaluate module text in similar fashion to require evaluations.","params":[{"type":{"names":["string"]},"description":"The path of the evaluated module.","name":"modulePath"},{"type":{"names":["string"]},"description":"The text content of the module.","name":"moduleText"}],"returns":[{"type":{"names":["*"]}}],"access":"private","order":8},"loadModule":{"longname":"loadModule","name":"loadModule","scope":"global","kind":"function","description":"Load and evaluate a module returning undefined to promise resolve on failure.","params":[{"type":{"names":["string"]},"description":"The path of the evaluated module.","name":"modulePath"}],"returns":[{"type":{"names":["*"]}}],"access":"private","order":9},"loader":{"longname":"loader","name":"loader","scope":"global","kind":"function","description":"Load a module","params":[{"type":{"names":["Object"]},"optional":true,"defaultvalue":"resolver","description":"User-created resolver function.","name":"userResolver"},{"type":{"names":["string"]},"description":"Module name or path, same format as for require().","name":"moduleName"}],"returns":[{"type":{"names":["bluebird"]}}],"access":"private","order":10},"requireAsync":{"longname":"requireAsync","name":"requireAsync","scope":"global","kind":"function","description":"Load a module asychronously, this is an async version of require(). Will load a collection of modules if an array is supplied. Will reject if module is not found or on error.","params":[{"type":{"names":["Object"]},"optional":true,"defaultvalue":"resolver","description":"User-created resolver function or an options object.","name":"userResolver"},{"type":{"names":["string","Array"]},"description":"Module name or path (or array of either), same format as for require().","name":"moduleName"},{"type":{"names":["function"]},"optional":true,"description":"Node-style callback to use instead of (or as well as) returned promise.","name":"callback"}],"returns":[{"type":{"names":["bluebird"]},"description":"Promise, resolved with the module(s) or undefined."}],"access":"public","order":11},"getResolver":{"longname":"getResolver","name":"getResolver","scope":"global","kind":"function","description":"Generate a new resolver object following specfic rules defined in the options parametre. If no options are supplied, return a default resolver.","params":[{"type":{"names":["Object"]},"description":"Options to pass to the resolver object","name":"options"}],"returns":[{"type":{"names":["Object"]},"description":"The new resolver object or the current module resolver if no options supplied."}],"access":"public","order":12},"external:bluebird":{"longname":"external:bluebird","name":"bluebird","scope":"global","kind":"external","see":["{@link https://github.com/petkaantonov/bluebird}"],"order":0}}